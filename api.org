* Fd Object Structure
struc FdObject
    .shared_count  resd 1 ; fd objs are shared pointers
    .obj_type      resd 1 ; 0 for tty, 1 for file I/O, 2 for pipes
    .resource_data resd 1 ; obj_type dependent - 0 for tty, fat_file* for file I/O, pipe_obj* for pipes
    .sizeof
endstruc

* Scheduler: sched/sched.inc
** int EXEC(void* newIP) ; <0 for error, 0 for child, child PID for parent.
Create a new process by copying a state of the current one. The instruction pointer is placed at newIP.
NB: The fork() system call can be implemented in a surprisingly simple manner when such a function is provided.
** void PROCESS_LOCK_SET()
Do not switch task on timer interrupt till this lock is triggered back.
NB: Should be used as rare as possible! Provided for ability of performing atomic
    operations (e.g. append an element to a list or do something related to hardware).
    If there is a way of performing some IO job by handling interrupts, consider using it.
** void PROCESS_LOCK_RELEASE()
Release the task lock.
** int CURRENT_PID()
Get PID of the current process.
** int WAIT(int pid) ; <0 for error, return status on success
Wait till a process with pid is terminated.
** FdObject *FD_OBJ_BY_NUM(int fd) ; -1 if not found in table, pointer otherwise
Find an fd object with a given number in the process' FD table.
** int FD_OBJ_ADD(FdObject *fdObj) ; Number assigned to the appended fd object.
Place a pointer to this fd object in the leftmost free place of fd table.
NB: The scheduler will not alter shared_count of any fd object.
    Resource manager is supposed to do this when necessary.
    Applied to every method below as well.
** void FD_OBJ_ASSIGN(FdObject *fdObj, int newfd)
Assign the given fd object to the given number in the table. 
If some fd is replaced by this operation, FD_OBJ_CLOSE is called for newfd first.
** void FD_OBJ_CLOSE(int fd)
Call close method of an object associated with this fd, remove it from the table.
** void KILL(int pid, int status)
Kill the process with given pid.

* Memory manager: util/mem/mem.inc
** void* GET_PHYS_PAGES(int amount);
   returns address of amount free physical page block
** void PUT_PHYS_PAGE(void* addr, int amount);
   frees physical amount page block from addr
** void MAP(void* virt, void* phys, int amount);
   maps virtual page bloack to physical page block
** void UNMAP(void* virt, int amount);
   unmaps virtual page block and puts physical
** void* GET_PHYS_ADDR(void* virt);
   returns where is virtual page mapped
** void* DUP_PAGE_TABLE(void* table);
   duplicates current page table and returns its physical address
** void* NEW_PAGE_TABLE();
   creates new page table with last 1 GB mapped to kernel pages
** int BRK(void* addr);
   sets process data segment program break to addr

* Memory lib: lib/mem/mem.inc
** void* MALLOC(int len);
   returns pointer to memory chunk of len bytes
** void FREE(void*);
   frees memory chunk starting from addr

* Buffer for kbd: dev/kbd/kbd.inc
** void KBD_BUF_PUTC(char a);
   adds to keyboard buffer a symbol
   if there is no free space the oldest sybmol will be removed
** void KBD_BUF_DELC();
   removes last added symbol if it is not endl
** char KBD_BUF_GETC();
   get from keyboard buffer a symbol(the oldest), it will be removed from buffer
   symbol returned in al
